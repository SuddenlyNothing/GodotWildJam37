[gd_resource type="Shader" format=2]

[resource]
resource_local_to_scene = true
code = "shader_type canvas_item;
render_mode unshaded;

uniform int intensity : hint_range(0,200); 
uniform float precision : hint_range(0,0.02);
uniform float num_shade_lines : hint_range(1.0, 100.0);
uniform float shade_speed : hint_range(0.0, 10.0);
uniform vec4 outline_color_1 : hint_color;
uniform vec4 outline_color_2 : hint_color;
uniform vec4 shade_color_1 : hint_color;
uniform vec4 shade_color_2 : hint_color;
uniform bool is_color_1;
uniform bool is_active;


varying vec2 o;
varying vec2 f;

void vertex()
{
	if (is_active) {
		o = VERTEX;
		vec2 uv = (UV - 0.5);
		VERTEX += uv * float(intensity);
		f = VERTEX;
	}
}

void fragment()
{
	if (is_active) {
		ivec2 t = textureSize(TEXTURE, 0);
		vec2 regular_uv;
		regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
		regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
		
		vec4 regular_color = texture(TEXTURE, regular_uv);
		if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
			regular_color = vec4(0.0); 
		}
		
		vec2 ps = TEXTURE_PIXEL_SIZE * float(intensity) * precision;
		
		vec4 final_color = regular_color;
		if (regular_color.a <= 0.0)
		{
			for(int x = -1; x <= 1; x += 1){
				for(int y = -1; y <= 1; y += 1){
					//Get the X and Y offset from this
					if (x==0 && y==0)
						continue;
						
					vec2 outline_uv = regular_uv + vec2(float(x) * ps.x, float(y) * ps.y); 
					
					//Sample here, if we are out of bounds then fail
					vec4 outline_sample = texture(TEXTURE, outline_uv);
					if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
						//We aren't a real color
						outline_sample = vec4(0);
					}
					
					//Is our sample empty? Is there something nearby?
					if(outline_sample.a > final_color.a){
						if (is_color_1) {
							final_color = outline_color_1;
						} else {
							final_color = outline_color_2;
						}
					}
				}
			}
		}
		
		// replaces some colors with the shade color
		if (regular_color.a > 0.0) {
			if (int((UV.x+UV.y) * num_shade_lines + (TIME * shade_speed)) % 2 == 1) {
				if (is_color_1){
					final_color = shade_color_1;
				} else {
					final_color = shade_color_2;
				}
			}
		}
		
		COLOR = final_color;
	} else {
		COLOR = texture(TEXTURE, UV);
	}
}"
